generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean
  image         String?
  bio           String?
  createdAt     DateTime
  updatedAt     DateTime

  posts    Post[]
  accounts Account[]
  sessions Session[]
  contactc Contact[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Post {
  id       String     @id @default(ulid())
  title    String     @db.VarChar(255)
  content  String
  status   PostStatus @default(DRAFT)
  featured Boolean    @default(false)
  imgUrl   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy String
  sectionId String?

  user    User     @relation(fields: [createdBy], references: [id])
  section Section? @relation(fields: [sectionId], references: [id])

  categories PostCategory[]
}

model Category {
  id        String         @id @default(ulid())
  name      String         @unique
  color     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  posts     PostCategory[]
}

model PostCategory {
  id         String   @id @default(ulid())
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  post       Post     @relation(fields: [postId], references: [id])

  @@unique([postId, categoryId])
}

model Section {
  id    String @id @default(ulid())
  name  String @db.VarChar(100)
  posts Post[]
}

enum PostStatus {
  PUBLISHED
  SOFT_PUBLISHED
  DRAFT
  HIDDEN
}

model Contact {
  id    String @id @default(ulid())
  type  String
  value String

  userId String

  user User @relation(fields: [userId], references: [id])

  @@map("contacts")
}
